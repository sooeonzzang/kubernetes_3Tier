Name:             mysql-1
Namespace:        default
Priority:         0
Service Account:  default
Node:             node1.example.com/10.100.0.101
Start Time:       Fri, 29 Dec 2023 20:10:54 +0900
Labels:           app=mysql
                  app.kubernetes.io/name=mysql
                  apps.kubernetes.io/pod-index=1
                  controller-revision-hash=mysql-74dd9f5975
                  statefulset.kubernetes.io/pod-name=mysql-1
Annotations:      <none>
Status:           Pending
IP:               10.44.0.2
IPs:
  IP:           10.44.0.2
Controlled By:  StatefulSet/mysql
Init Containers:
  init-mysql:
    Container ID:  containerd://4a45722ec37b6425de1f2cf2242c1c9f6b6a204d2ee9e66440db452354e861ad
    Image:         mysql:5.7
    Image ID:      docker.io/library/mysql@sha256:4bc6bc963e6d8443453676cae56536f4b8156d78bae03c0145cbe47c2aad73bb
    Port:          <none>
    Host Port:     <none>
    Command:
      bash
      -c
      set -ex
      # Generate mysql server-id from pod ordinal index.
      [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
      ordinal=${BASH_REMATCH[1]}
      echo [mysqld] > /mnt/conf.d/server-id.cnf
      # Add an offset to avoid reserved server-id=0 value.
      echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
      # Copy appropriate conf.d files from config-map to emptyDir.
      if [[ $ordinal -eq 0 ]]; then
        cp /mnt/config-map/primary.cnf /mnt/conf.d/
      else
        cp /mnt/config-map/replica.cnf /mnt/conf.d/
      fi          
      
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Fri, 29 Dec 2023 20:10:55 +0900
      Finished:     Fri, 29 Dec 2023 20:10:55 +0900
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /mnt/conf.d from conf (rw)
      /mnt/config-map from config-map (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-h8grf (ro)
  clone-mysql:
    Container ID:  containerd://afe724a72b0b00bb9e04adffa4968a01c38cd8bc5ebf092d421696c6abe10f66
    Image:         gcr.io/google-samples/xtrabackup:1.0
    Image ID:      sha256:43f240658ef1a9c6dfcbbdd67bd347fa40a8861339190890e2d149cbd91b1209
    Port:          <none>
    Host Port:     <none>
    Command:
      bash
      -c
      set -ex
      # Skip the clone if data already exists.
      [[ -d /var/lib/mysql/mysql ]] && exit 0
      # Skip the clone on primary (ordinal index 0).
      [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
      ordinal=${BASH_REMATCH[1]}
      [[ $ordinal -eq 0 ]] && exit 0
      # Clone data from previous peer.
      ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
      # Prepare the backup.
      xtrabackup --prepare --target-dir=/var/lib/mysql          
      
    State:          Waiting
      Reason:       CrashLoopBackOff
    Last State:     Terminated
      Reason:       Error
      Exit Code:    1
      Started:      Fri, 29 Dec 2023 20:11:41 +0900
      Finished:     Fri, 29 Dec 2023 20:11:41 +0900
    Ready:          False
    Restart Count:  3
    Environment:    <none>
    Mounts:
      /etc/mysql/conf.d from conf (rw)
      /var/lib/mysql from data (rw,path="mysql")
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-h8grf (ro)
Containers:
  mysql:
    Container ID:   
    Image:          mysql:5.7
    Image ID:       
    Port:           3306/TCP
    Host Port:      0/TCP
    State:          Waiting
      Reason:       PodInitializing
    Ready:          False
    Restart Count:  0
    Requests:
      cpu:      500m
      memory:   1Gi
    Liveness:   exec [mysqladmin ping] delay=30s timeout=5s period=10s #success=1 #failure=3
    Readiness:  exec [mysql -h localhost -e SELECT 1] delay=5s timeout=1s period=2s #success=1 #failure=3
    Environment:
      MYSQL_ROOT_PASSWORD:  petclinic
      MYSQL_DATABASE:       petclinic
    Mounts:
      /etc/mysql/conf.d from conf (rw)
      /var/lib/mysql from data (rw,path="mysql")
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-h8grf (ro)
  xtrabackup:
    Container ID:  
    Image:         gcr.io/google-samples/xtrabackup:1.0
    Image ID:      
    Port:          3307/TCP
    Host Port:     0/TCP
    Command:
      bash
      -c
      set -ex
      cd /var/lib/mysql
      
      # Determine binlog position of cloned data, if any.
      if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
        # XtraBackup already generated a partial "CHANGE MASTER TO" query
        # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
        cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
        # Ignore xtrabackup_binlog_info in this case (it's useless).
        rm -f xtrabackup_slave_info xtrabackup_binlog_info
      elif [[ -f xtrabackup_binlog_info ]]; then
        # We're cloning directly from primary. Parse binlog position.
        [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
        rm -f xtrabackup_binlog_info xtrabackup_slave_info
        echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
              MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
      fi
      
      # Check if we need to complete a clone by starting replication.
      if [[ -f change_master_to.sql.in ]]; then
        echo "Waiting for mysqld to be ready (accepting connections)"
        until mysql -h localhost -e "SELECT 1"; do sleep 1; done
      
        echo "Initializing replication from clone position"
        mysql -h localhost \
              -e "$(<change_master_to.sql.in), \
                      MASTER_HOST='mysql-0.mysql', \
                      MASTER_USER='root', \
                      MASTER_PASSWORD='petclinic', \
                      MASTER_CONNECT_RETRY=10; \
                    START SLAVE;" || exit 1
        # In case of container restart, attempt this at-most-once.
        mv change_master_to.sql.in change_master_to.sql.orig
      fi
      
      # Start a server to send backups when requested by peers.
      exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
        "xtrabackup --backup --slave-info --stream=xbstream --host=localhost --user=root"          
      
    State:          Waiting
      Reason:       PodInitializing
    Ready:          False
    Restart Count:  0
    Requests:
      cpu:        100m
      memory:     100Mi
    Environment:  <none>
    Mounts:
      /etc/mysql/conf.d from conf (rw)
      /var/lib/mysql from data (rw,path="mysql")
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-h8grf (ro)
Conditions:
  Type              Status
  Initialized       False 
  Ready             False 
  ContainersReady   False 
  PodScheduled      True 
Volumes:
  data:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  data-mysql-1
    ReadOnly:   false
  conf:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
  config-map:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      mysql
    Optional:  false
  kube-api-access-h8grf:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type     Reason            Age                From               Message
  ----     ------            ----               ----               -------
  Warning  FailedScheduling  80s                default-scheduler  0/4 nodes are available: pod has unbound immediate PersistentVolumeClaims. preemption: 0/4 nodes are available: 4 Preemption is not helpful for scheduling..
  Normal   Scheduled         78s                default-scheduler  Successfully assigned default/mysql-1 to node1.example.com
  Normal   Pulled            77s                kubelet            Container image "mysql:5.7" already present on machine
  Normal   Created           77s                kubelet            Created container init-mysql
  Normal   Started           77s                kubelet            Started container init-mysql
  Normal   Pulled            31s (x4 over 77s)  kubelet            Container image "gcr.io/google-samples/xtrabackup:1.0" already present on machine
  Normal   Created           31s (x4 over 77s)  kubelet            Created container clone-mysql
  Normal   Started           31s (x4 over 77s)  kubelet            Started container clone-mysql
  Warning  BackOff           2s (x6 over 75s)   kubelet            Back-off restarting failed container clone-mysql in pod mysql-1_default(6e004877-131d-4f43-bf60-8b274ceb920a)